// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PRO.Data.Context;

#nullable disable

namespace PRO_.Migrations
{
    [DbContext(typeof(ToolLendingContext))]
    partial class ToolLendingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PRO.Models.Borrow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Users_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("Users_ID");

                    b.ToTable("Borrows");
                });

            modelBuilder.Entity("PRO.Models.Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PRO.Models.Event", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizerID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Organizers_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("OrganizerID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("PRO.Models.History", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Added_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Tool_ID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Users_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("Tool_ID");

                    b.HasIndex("UserID");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("PRO.Models.LendingPartner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartnerID")
                        .HasColumnType("uuid");

                    b.Property<string>("Partner_Contract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Partners_Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Partnership_Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Start_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Users_Id")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("PartnerID");

                    b.HasIndex("UserID");

                    b.ToTable("LendingPartners");
                });

            modelBuilder.Entity("PRO.Models.Notification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Read")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Sent_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Users_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PRO.Models.Payment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Ammount")
                        .HasColumnType("real");

                    b.Property<Guid>("BorrowID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Orders_ID")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BorrowID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PRO.Models.ProductBorrow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Orders_ID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToolID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Tools_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ToolID");

                    b.ToTable("ProductBorrows");
                });

            modelBuilder.Entity("PRO.Models.Return", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Borrows_ID")
                        .HasColumnType("uuid");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("Borrows_ID");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("PRO.Models.Review", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("Tools_ID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Users_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("Tools_ID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PRO.Models.Schedule", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Available_from")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Available_to")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Tools_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("Tools_ID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("PRO.Models.SecurityDeposit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Ammount")
                        .HasColumnType("real");

                    b.Property<DateTime>("Refund_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Tools_ID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Users_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("Tools_ID");

                    b.HasIndex("UserID");

                    b.ToTable("SecurityDeposits");
                });

            modelBuilder.Entity("PRO.Models.Tool", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("Users_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Users_ID");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("PRO.Models.ToolAccessory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity_Available")
                        .HasColumnType("integer");

                    b.Property<Guid>("Tool_ID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("Tool_ID");

                    b.ToTable("ToolAccessories");
                });

            modelBuilder.Entity("PRO.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PRO.Models.Borrow", b =>
                {
                    b.HasOne("PRO.Models.User", "User")
                        .WithMany("Borrows")
                        .HasForeignKey("Users_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRO.Models.Event", b =>
                {
                    b.HasOne("PRO.Models.User", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("PRO.Models.History", b =>
                {
                    b.HasOne("PRO.Models.Tool", "Tool")
                        .WithMany("Histories")
                        .HasForeignKey("Tool_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRO.Models.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRO.Models.LendingPartner", b =>
                {
                    b.HasOne("PRO.Models.User", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRO.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRO.Models.Notification", b =>
                {
                    b.HasOne("PRO.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRO.Models.Payment", b =>
                {
                    b.HasOne("PRO.Models.Borrow", "Borrow")
                        .WithMany()
                        .HasForeignKey("BorrowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("PRO.Models.ProductBorrow", b =>
                {
                    b.HasOne("PRO.Models.Borrow", "Order")
                        .WithMany("ProductBorrows")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRO.Models.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("PRO.Models.Return", b =>
                {
                    b.HasOne("PRO.Models.Borrow", "Borrow")
                        .WithMany("Returns")
                        .HasForeignKey("Borrows_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrow");
                });

            modelBuilder.Entity("PRO.Models.Review", b =>
                {
                    b.HasOne("PRO.Models.Tool", "Tool")
                        .WithMany("Reviews")
                        .HasForeignKey("Tools_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRO.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRO.Models.Schedule", b =>
                {
                    b.HasOne("PRO.Models.Tool", "Tool")
                        .WithMany("Schedules")
                        .HasForeignKey("Tools_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("PRO.Models.SecurityDeposit", b =>
                {
                    b.HasOne("PRO.Models.Tool", "Tool")
                        .WithMany("SecurityDeposits")
                        .HasForeignKey("Tools_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRO.Models.User", "User")
                        .WithMany("SecurityDeposits")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRO.Models.Tool", b =>
                {
                    b.HasOne("PRO.Models.Category", "Category")
                        .WithMany("Tools")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PRO.Models.User", "User")
                        .WithMany("Tools")
                        .HasForeignKey("Users_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PRO.Models.ToolAccessory", b =>
                {
                    b.HasOne("PRO.Models.Tool", "Tool")
                        .WithMany("Accessories")
                        .HasForeignKey("Tool_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("PRO.Models.Borrow", b =>
                {
                    b.Navigation("ProductBorrows");

                    b.Navigation("Returns");
                });

            modelBuilder.Entity("PRO.Models.Category", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("PRO.Models.Tool", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("Histories");

                    b.Navigation("Reviews");

                    b.Navigation("Schedules");

                    b.Navigation("SecurityDeposits");
                });

            modelBuilder.Entity("PRO.Models.User", b =>
                {
                    b.Navigation("Borrows");

                    b.Navigation("Histories");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("SecurityDeposits");

                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
